#include "../inc/speex_callbacks.h"
#include "../inc/wave_out.h"

FILE *out_file_open(char *outFile, int rate, int *channels)
{
   FILE *fout=NULL;
   /*Open output file*/
   if (outFile == NULL || strlen(outFile)==0)
   {
	   unsigned int speex_channels = *channels;
	   if (Set_WIN_Params (INVALID_FILEDESC, rate, SAMPLE_SIZE, speex_channels))
	   {
		   return NULL;
	   }
   }
   else
   {
		fout = fopen(outFile, "wb");
		if (fout)
		{
			if (strcmp(outFile+strlen(outFile)-4,".wav")==0 || strcmp(outFile+strlen(outFile)-4,".WAV")==0)
			{
				write_wav_header(fout, rate, *channels, 0, 0);
			}
		}
   }

   return fout;
}


static void *process_header(ogg_packet *op, spx_int32_t enh_enabled, spx_int32_t *frame_size, int *granule_frame_size, spx_int32_t *rate, int *nframes, int forceMode, int *channels, SpeexStereoState *stereo, int *extra_headers, int quiet)
{
   void *st;
   const SpeexMode *mode;
   SpeexHeader *header;
   int modeID;
   SpeexCallback callback;
      
   header = speex_packet_to_header((char*)op->packet, op->bytes);
   if (!header)
   {
      return NULL;
   }
   if (header->mode >= SPEEX_NB_MODES || header->mode<0)
   {
      fprintf (stderr, "Mode number %d does not (yet/any longer) exist in this version\n", 
               header->mode);
      free(header);
      return NULL;
   }
      
   modeID = header->mode;
   if (forceMode!=-1)
      modeID = forceMode;

   mode = speex_lib_get_mode (modeID);
   
   if (header->speex_version_id > 1)
   {
      free(header);
      return NULL;
   }

   if (mode->bitstream_version < header->mode_bitstream_version)
   {
      free(header);
      return NULL;
   }
   if (mode->bitstream_version > header->mode_bitstream_version) 
   {
      free(header);
      return NULL;
   }
   
   st = speex_decoder_init(mode);
   if (!st)
   {
      free(header);
      return NULL;
   }
   speex_decoder_ctl(st, SPEEX_SET_ENH, &enh_enabled);
   speex_decoder_ctl(st, SPEEX_GET_FRAME_SIZE, frame_size);
   *granule_frame_size = *frame_size;

   if (!(*channels==1))
   {
      callback.callback_id = SPEEX_INBAND_STEREO;
      callback.func = speex_std_stereo_request_handler;
      callback.data = stereo;
      speex_decoder_ctl(st, SPEEX_SET_HANDLER, &callback);
   }
   if (!*rate)
      *rate = header->rate;
   /* Adjust rate if --force-* options are used */
   if (forceMode!=-1)
   {
      if (header->mode < forceMode)
      {
         *rate <<= (forceMode - header->mode);
         *granule_frame_size >>= (forceMode - header->mode);
      }
      if (header->mode > forceMode)
      {
         *rate >>= (header->mode - forceMode);
         *granule_frame_size <<= (header->mode - forceMode);
      }
   }


   speex_decoder_ctl(st, SPEEX_SET_SAMPLING_RATE, rate);

   *nframes = header->frames_per_packet;

   if (*channels==-1)
      *channels = header->nb_channels;
   
   if (!quiet)
   {
//       if (*channels==1)
//          fprintf (stderr, " (mono");
//       else
//          fprintf (stderr, " (stereo");
//       
//       if (header->vbr)
//          fprintf (stderr, ", VBR)\n");
//       else
//          fprintf(stderr, ")\n");
   }

   *extra_headers = header->extra_headers;

   free(header);
   return st;
}


char *inFile2, *outFile2=NULL;
FILE *fin2, *fout2=NULL;
short out2[MAX_FRAME_SIZE];
short output2[MAX_FRAME_SIZE];
int frame_size2=0, granule_frame_size2=0;
void *st2=NULL;
SpeexBits bits2;
int packet_count2=0;
int stream_init2 = 0;
int quiet2 = 0;
ogg_int64_t page_granule2=0, last_granule2=0;
int skip_samples2=0, page_nb_packets2;
ogg_sync_state oy2;
ogg_page       og2;
ogg_packet     op2;
ogg_stream_state os2;
int enh_enabled2=1;
int nframes2=2;
int print_bitrate2=0;
int close_in2=0;
int eos2=0;
int forceMode2=-1;
int audio_size2=0;
float loss_percent2=-1;
SpeexStereoState stereo2 = SPEEX_STEREO_STATE_INIT;
//int channels=-1;
int channels2=1;
int rate2=0;
int extra_headers2=0;
int wav_format2=1;
int lookahead2;
int speex_serialno2 = -1;
volatile bool bOggDecStop = true;

DWORD WINAPI DecodeOggThreadPrc(LPVOID lpParameter)
{
	inFile2="1.spx";
	// 	outFile2 = "1.wav";
	fin2 = fopen(inFile2, "rb");
	if (!fin2)
	{
		return 0;
	}
	close_in2=1;
	/*Init Ogg data struct*/
	ogg_sync_init(&oy2);
	
	speex_bits_init(&bits2);
	/*Main decoding loop*/
	
	while (!bOggDecStop)
	{
		char *data;
		int i, j, nb_read;
		/*Get the ogg buffer for writing*/
		data = ogg_sync_buffer(&oy2, 200);
		/*Read bitstream from input file*/
		nb_read = fread(data, sizeof(char), 200, fin2);      
		ogg_sync_wrote(&oy2, nb_read);
		/*Loop for all complete pages we got (most likely only one)*/
		while (ogg_sync_pageout(&oy2, &og2)==1)
		{
			int packet_no;
			if (stream_init2 == 0)
			{
				ogg_stream_init(&os2, ogg_page_serialno(&og2));
				stream_init2 = 1;
			}
			
			if (ogg_page_serialno(&og2) != os2.serialno) {
				/* so all streams are read. */
				ogg_stream_reset_serialno(&os2, ogg_page_serialno(&og2));
			}
			/*Add page to the bitstream*/
			ogg_stream_pagein(&os2, &og2);
			page_granule2 = ogg_page_granulepos(&og2);
			page_nb_packets2 = ogg_page_packets(&og2);
			if (page_granule2>0 && frame_size2)
			{
				/* FIXME: shift the granule values if --force-* is specified */
				skip_samples2 = frame_size2*(page_nb_packets2*granule_frame_size2*nframes2 - (page_granule2-last_granule2))/granule_frame_size2;
				if (ogg_page_eos(&og2))
					skip_samples2 = -skip_samples2;
					/*else if (!ogg_page_bos(&og))
				skip_samples = 0;*/
			} 
			else
			{
				skip_samples2 = 0;
			}
			last_granule2 = page_granule2;
			/*Extract all available packets*/
			packet_no=0;
			while (!eos2 && ogg_stream_packetout(&os2, &op2) == 1)
			{
				if (!memcmp(op2.packet, "Speex", 5))
				{
					speex_serialno2 = os2.serialno;
				}
				if (speex_serialno2 == -1 || os2.serialno != speex_serialno2)
					break;
				/*If first packet, process as Speex header*/
				if (packet_count2==0)
				{
					st2 = process_header(&op2, enh_enabled2, (spx_int32_t*)&frame_size2, &granule_frame_size2, (spx_int32_t*)&rate2, &nframes2, forceMode2, &channels2, &stereo2, &extra_headers2, quiet2);
					if (!st2)
						exit(1);
					speex_decoder_ctl(st2, SPEEX_GET_LOOKAHEAD, &lookahead2);
					if (!nframes2)
						nframes2=1;
					fout2 = out_file_open(outFile2, rate2, &channels2);
					
				}
				else if (packet_count2==1)
				{
				}
				else if (packet_count2<=1+extra_headers2)
				{
					/* Ignore extra headers */
				} 
				else 
				{
					int lost=0;
					packet_no++;
					if (loss_percent2>0 && 100*((float)rand())/RAND_MAX<loss_percent2)
						lost=1;
					
					/*End of stream condition*/
					if (op2.e_o_s && os2.serialno == speex_serialno2) /* don't care for anything except speex eos */
						eos2=1;
					
					/*Copy Ogg packet to Speex bitstream*/
					speex_bits_read_from(&bits2, (char*)op2.packet, op2.bytes);
					for (j=0;j!=nframes2;j++)
					{
						int ret;
						/*Decode frame*/
						if (!lost)
							ret = speex_decode_int(st2, &bits2, (spx_int16_t*)output2);
						else
							ret = speex_decode_int(st2, NULL, (spx_int16_t*)output2);
						
							/*for (i=0;i<frame_size*channels;i++)
						printf ("%d\n", (int)output[i]);*/
						
						if (ret==-1)
							break;
						if (ret==-2)
						{
							fprintf (stderr, "Decoding error: corrupted stream?\n");
							break;
						}
						if (speex_bits_remaining(&bits2)<0)
						{
							fprintf (stderr, "Decoding overflow: corrupted stream?\n");
							break;
						}
						if (channels2==2)
							speex_decode_stereo_int((spx_int16_t*)output2, frame_size2, &stereo2);
						/*Convert to short and save to output file*/
						if (outFile2 == NULL || strlen(outFile2)!=0)
						{
							for (i=0;i<frame_size2*channels2;i++)
								out2[i]=le_short(output2[i]);
						}
						else 
						{
							for (i=0;i<frame_size2*channels2;i++)
								out2[i]=output2[i];
						}
						int frame_offset = 0;
						int new_frame_size = frame_size2;
						/*printf ("packet %d %d\n", packet_no, skip_samples);*/
						/*fprintf (stderr, "packet %d %d %d\n", packet_no, skip_samples, lookahead);*/
						if (packet_no == 1 && j==0 && skip_samples2 > 0)
						{
							/*printf ("chopping first packet\n");*/
							new_frame_size -= skip_samples2+lookahead2;
							frame_offset = skip_samples2+lookahead2;
						}
						if (packet_no == page_nb_packets2 && skip_samples2 < 0)
						{
							int packet_length = nframes2*frame_size2+skip_samples2+lookahead2;
							new_frame_size = packet_length - j*frame_size2;
							if (new_frame_size<0)
								new_frame_size = 0;
							if (new_frame_size>frame_size2)
								new_frame_size = frame_size2;
							/*printf ("chopping end: %d %d %d\n", new_frame_size, packet_length, packet_no);*/
						}
						if (new_frame_size>0)
						{  
							//fwrite(out+frame_offset*channels, sizeof(short), new_frame_size*channels, fout);
							WIN_Play_Samples (out2+frame_offset*channels2, sizeof(short) * new_frame_size*channels2);
							audio_size2+=sizeof(short)*new_frame_size*channels2;
						}
					}
				}
				packet_count2++;
			}
		}
		if (feof(fin2))
			break;
	}
				
	if (fout2 && wav_format2)
	{
		if (fseek(fout2,4,SEEK_SET)==0)
		{
			int tmp;
			tmp = le_int(audio_size2+36);
			fwrite(&tmp,4,1,fout2);
			if (fseek(fout2,32,SEEK_CUR)==0)
			{
				tmp = le_int(audio_size2);
				fwrite(&tmp,4,1,fout2);
			} 
		} 
	}
	
	if (st2)
	{
		speex_decoder_destroy(st2);
	}
	
	speex_bits_destroy(&bits2);
	if (stream_init2)
		ogg_stream_clear(&os2);
	ogg_sync_clear(&oy2);
	
	if (outFile2 == NULL || strlen(outFile2)==0)
		WIN_Audio_close ();
	
	if (close_in2)
		fclose(fin2);
	if (fout2 != NULL)
		fclose(fout2);   
	
	return 0;
}
